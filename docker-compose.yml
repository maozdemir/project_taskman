services:
  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3.11-management
    container_name: taskman-rabbitmq
    hostname: taskman-rabbitmq
    ports:
      - "5672:5672"     # AMQP port
      - "15672:15672"   # Management UI port
    environment:
      RABBITMQ_DEFAULT_USER: taskman
      RABBITMQ_DEFAULT_PASS: taskman_dev_password
      RABBITMQ_DEFAULT_VHOST: /
      # Enable management plugin
      RABBITMQ_PLUGINS: rabbitmq_management
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
      - ./rabbitmq/definitions.json:/etc/rabbitmq/definitions.json:ro
    networks:
      - taskman-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

  # PostgreSQL Database (shared by services)
  postgres:
    image: postgres:15
    container_name: taskman-postgres
    environment:
      POSTGRES_DB: taskman
      POSTGRES_USER: taskman
      POSTGRES_PASSWORD: taskman_dev_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d:ro
    networks:
      - taskman-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U taskman -d taskman"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: taskman-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - taskman-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # NGINX Load Balancer
  nginx:
    build:
      context: ./taskman-backend/services/nginx
      dockerfile: Dockerfile
    container_name: taskman-nginx
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - authorization-service
    networks:
      - taskman-network
    restart: unless-stopped

  # Authorization Service
  authorization-service:
    build:
      context: ./taskman-backend/services/authorization-service
      dockerfile: Dockerfile
    container_name: taskman-authorization-service
    ports:
      - "50051:50051"
      - "8080:8080"
    environment:
      DB_SOURCE: "postgresql://taskman:taskman_dev_password@postgres:5432/taskman?sslmode=disable"
      RABBITMQ_URI: "amqp://taskman:taskman_dev_password@rabbitmq:5672/"
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - taskman-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped

networks:
  taskman-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  rabbitmq_data:
    driver: local