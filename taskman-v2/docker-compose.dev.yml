version: '3.9'

services:
  # ==========================================
  # DATABASES (8 separate PostgreSQL instances)
  # ==========================================

  postgres-auth:
    image: postgres:15
    container_name: taskman-v2-postgres-auth
    environment:
      POSTGRES_DB: auth_db
      POSTGRES_USER: auth_user
      POSTGRES_PASSWORD: ${AUTH_DB_PASSWORD:-auth_password_dev}
    ports:
      - "5432:5432"
    volumes:
      - postgres_auth_data:/var/lib/postgresql/data
    networks:
      - taskman-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U auth_user -d auth_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  postgres-authz:
    image: postgres:15
    container_name: taskman-v2-postgres-authz
    environment:
      POSTGRES_DB: authz_db
      POSTGRES_USER: authz_user
      POSTGRES_PASSWORD: ${AUTHZ_DB_PASSWORD:-authz_password_dev}
    ports:
      - "5433:5432"
    volumes:
      - postgres_authz_data:/var/lib/postgresql/data
    networks:
      - taskman-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U authz_user -d authz_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  postgres-user:
    image: postgres:15
    container_name: taskman-v2-postgres-user
    environment:
      POSTGRES_DB: user_db
      POSTGRES_USER: user_user
      POSTGRES_PASSWORD: ${USER_DB_PASSWORD:-user_password_dev}
    ports:
      - "5434:5432"
    volumes:
      - postgres_user_data:/var/lib/postgresql/data
    networks:
      - taskman-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user_user -d user_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  postgres-iam:
    image: postgres:15
    container_name: taskman-v2-postgres-iam
    environment:
      POSTGRES_DB: iam_db
      POSTGRES_USER: iam_user
      POSTGRES_PASSWORD: ${IAM_DB_PASSWORD:-iam_password_dev}
    ports:
      - "5435:5432"
    volumes:
      - postgres_iam_data:/var/lib/postgresql/data
    networks:
      - taskman-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U iam_user -d iam_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  postgres-task:
    image: postgres:15
    container_name: taskman-v2-postgres-task
    environment:
      POSTGRES_DB: task_db
      POSTGRES_USER: task_user
      POSTGRES_PASSWORD: ${TASK_DB_PASSWORD:-task_password_dev}
    ports:
      - "5436:5432"
    volumes:
      - postgres_task_data:/var/lib/postgresql/data
    networks:
      - taskman-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U task_user -d task_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  postgres-notification:
    image: postgres:15
    container_name: taskman-v2-postgres-notification
    environment:
      POSTGRES_DB: notification_db
      POSTGRES_USER: notification_user
      POSTGRES_PASSWORD: ${NOTIFICATION_DB_PASSWORD:-notification_password_dev}
    ports:
      - "5437:5432"
    volumes:
      - postgres_notification_data:/var/lib/postgresql/data
    networks:
      - taskman-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U notification_user -d notification_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # TimescaleDB for Audit Service (time-series optimized)
  timescaledb-audit:
    image: timescale/timescaledb:latest-pg15
    container_name: taskman-v2-timescaledb-audit
    environment:
      POSTGRES_DB: audit_db
      POSTGRES_USER: audit_user
      POSTGRES_PASSWORD: ${AUDIT_DB_PASSWORD:-audit_password_dev}
    ports:
      - "5438:5432"
    volumes:
      - timescaledb_audit_data:/var/lib/postgresql/data
    networks:
      - taskman-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U audit_user -d audit_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # ==========================================
  # REDIS CACHE (8 separate instances using different databases)
  # ==========================================

  redis:
    image: redis:7-alpine
    container_name: taskman-v2-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_password_dev} --maxmemory 2gb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - taskman-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # ==========================================
  # RABBITMQ MESSAGE BROKER
  # ==========================================

  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: taskman-v2-rabbitmq
    hostname: taskman-v2-rabbitmq
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER:-taskman}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD:-rabbitmq_password_dev}
      RABBITMQ_DEFAULT_VHOST: /
    ports:
      - "5672:5672"   # AMQP
      - "15672:15672" # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./infrastructure/rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
      - ./infrastructure/rabbitmq/definitions.json:/etc/rabbitmq/definitions.json:ro
    networks:
      - taskman-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # ==========================================
  # HASHICORP VAULT (Secrets Management)
  # ==========================================

  vault:
    image: hashicorp/vault:latest
    container_name: taskman-v2-vault
    environment:
      VAULT_DEV_ROOT_TOKEN_ID: ${VAULT_TOKEN:-dev-root-token}
      VAULT_DEV_LISTEN_ADDRESS: 0.0.0.0:8200
    ports:
      - "8200:8200"
    volumes:
      - vault_data:/vault/file
      - ./infrastructure/vault/config:/vault/config:ro
    networks:
      - taskman-network
    cap_add:
      - IPC_LOCK
    healthcheck:
      test: ["CMD", "vault", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # ==========================================
  # OBSERVABILITY STACK
  # ==========================================

  prometheus:
    image: prom/prometheus:latest
    container_name: taskman-v2-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - taskman-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: taskman-v2-grafana
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: false
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./infrastructure/grafana/dashboards:/var/lib/grafana/dashboards:ro
    networks:
      - taskman-network
    depends_on:
      - prometheus
    restart: unless-stopped

  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: taskman-v2-jaeger
    environment:
      COLLECTOR_ZIPKIN_HOST_PORT: :9411
      COLLECTOR_OTLP_ENABLED: true
    ports:
      - "5775:5775/udp"   # Zipkin compact
      - "6831:6831/udp"   # Jaeger compact
      - "6832:6832/udp"   # Jaeger binary
      - "5778:5778"       # Serve configs
      - "16686:16686"     # Web UI
      - "14250:14250"     # gRPC
      - "14268:14268"     # HTTP
      - "14269:14269"     # Admin
      - "9411:9411"       # Zipkin
      - "4317:4317"       # OTLP gRPC
      - "4318:4318"       # OTLP HTTP
    networks:
      - taskman-network
    restart: unless-stopped

  # ==========================================
  # KONG API GATEWAY
  # ==========================================

  kong-database:
    image: postgres:15
    container_name: taskman-v2-kong-database
    environment:
      POSTGRES_DB: kong
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: ${KONG_DB_PASSWORD:-kong_password_dev}
    volumes:
      - kong_data:/var/lib/postgresql/data
    networks:
      - taskman-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kong -d kong"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  kong-migrations:
    image: kong:latest
    container_name: taskman-v2-kong-migrations
    command: kong migrations bootstrap
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: ${KONG_DB_PASSWORD:-kong_password_dev}
      KONG_PG_DATABASE: kong
    networks:
      - taskman-network
    depends_on:
      kong-database:
        condition: service_healthy
    restart: on-failure

  kong:
    image: kong:latest
    container_name: taskman-v2-kong
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: ${KONG_DB_PASSWORD:-kong_password_dev}
      KONG_PG_DATABASE: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_ADMIN_GUI_URL: http://localhost:8002
    ports:
      - "8000:8000"   # Proxy HTTP
      - "8443:8443"   # Proxy HTTPS
      - "8001:8001"   # Admin API HTTP
      - "8444:8444"   # Admin API HTTPS
      - "8002:8002"   # Kong Manager (GUI)
    networks:
      - taskman-network
    depends_on:
      kong-database:
        condition: service_healthy
      kong-migrations:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # ==========================================
  # MAILHOG (Email testing)
  # ==========================================

  mailhog:
    image: mailhog/mailhog:latest
    container_name: taskman-v2-mailhog
    ports:
      - "1025:1025"   # SMTP
      - "8025:8025"   # Web UI
    networks:
      - taskman-network
    restart: unless-stopped

  # ==========================================
  # AUTHENTICATION HTTP SERVICE
  # ==========================================

  auth-http-service:
    build:
      context: .
      dockerfile: services/authentication-service/Dockerfile
    container_name: taskman-v2-auth-http
    environment:
      DATABASE_URL: postgresql://auth_user:${AUTH_DB_PASSWORD:-auth_password_dev}@postgres-auth:5432/auth_db?sslmode=disable
      REDIS_ADDR: redis:6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redis_password_dev}
      RABBITMQ_URI: amqp://${RABBITMQ_USER:-taskman}:${RABBITMQ_PASSWORD:-rabbitmq_password_dev}@rabbitmq:5672/
      JWT_ACCESS_SECRET: ${JWT_ACCESS_SECRET:-dev-secret-key-min-32-characters-long-for-testing}
      JWT_REFRESH_SECRET: ${JWT_REFRESH_SECRET:-dev-refresh-secret-key-min-32-characters-long-for-testing}
      HTTP_PORT: 8080
    ports:
      - "80:8080"
    networks:
      - taskman-network
    depends_on:
      postgres-auth:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s
    restart: unless-stopped

networks:
  taskman-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.28.0.0/16

volumes:
  postgres_auth_data:
  postgres_authz_data:
  postgres_user_data:
  postgres_iam_data:
  postgres_task_data:
  postgres_notification_data:
  timescaledb_audit_data:
  redis_data:
  rabbitmq_data:
  vault_data:
  prometheus_data:
  grafana_data:
  kong_data: